---
swagger: "2.0"
info:
  description: "Catalog service for anchore-engine"
  version: "0.9.2"
  title: "Catalog"
  contact:
    email: "dev@anchore.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "localhost:83"
basePath: "/"
tags:
- name: "catalog"
  description: "Catalog Service"
  externalDocs:
    description: "Find out more"
    url: "http://anchore.com"
schemes:
- "https"
- "http"

paths:
  /health:
    get:
      x-swagger-router-controller: anchore_engine.apis.common
      operationId: health_check
      x-anchore-authz-action: None
      description: Health check, returns 200 and no body if service is running
      responses:
        200:
          description: Empty body on success
  /version:
    get:
      x-swagger-router-controller: anchore_engine.apis.common
      operationId: version_check
      x-anchore-authz-action: None
      description: Returns the version object for the service, including db schema version info
      responses:
        200:
          description: Version object describing version state
          schema:
            $ref: "#/definitions/ServiceVersion"
  /status:
    get:
      tags:
      - "catalog"
      summary: "Get the status of the service"
      description: ""
      operationId: "status"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
  /repo:
    post:
      tags:
      - "catalog"
      summary: "Add repo to watch to the DB"
      description: ""
      operationId: "repo_post"
      parameters:
      - name: 'regrepo'
        in: query
        type: string
        description: "full regrepo to add e.g. docker.io/library/alpine"
        required: true
      - name: 'autosubscribe'
        in: query
        type: boolean
        description: "flag to enable/disable auto tag_update activation when new images from a repo are added"
        required: false
      - name: 'lookuptag'
        in: query
        type: string
        description: "specify a tag to use for scanning a repo (default is 'latest')"
        required: false
      - name: 'dryrun'
        in: query
        type: boolean
        description: "flag to return tags in the repository without actually watching the repository, default is false"
        required: false
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
  /summaries/imagetags:
    get:
      tags:
      - "catalog"
      summary: "Get image digest and tags summary list from DB"
      description: ""
      operationId: "image_tags_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
  /images:
    get:
      tags:
      - "catalog"
      summary: "Get image records from DB"
      description: ""
      operationId: "list_images"
      parameters:
      - name: 'tag'
        in: query
        type: string
        description: "tag of image to get"
        required: false
      - name: 'digest'
        in: query
        type: string
        description: "digest of image to get"
        required: false
      - name: 'imageId'
        in: query
        type: string
        description: "imageId of image to get"
        required: false
      - name: 'registry_lookup'
        in: query
        type: boolean
        description: "force registry lookup"
        required: false
        default: false
      - name: 'history'
        in: query
        type: boolean
        description: "get all matching records for given tag"
        required: false
        default: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    post:
      tags:
      - "catalog"
      summary: "Get image records from DB"
      description: ""
      operationId: "add_image"
      parameters:
      - name: 'tag'
        in: query
        type: string
        description: "tag of image to add"
        required: false
      - name: 'digest'
        in: query
        type: string
        description: "digest of image to add"
        required: false
      - name: 'created_at'
        in: query
        type: integer
        description: "created_at timestamp override"
        required: false
      - name: from_archive
        in: query
        type: boolean
        description: If set, add the image from the image archive rather than running a new analysis. In this case, other params such as metadata and tag are ignored and only the digest is used.
      - name: allow_dockerfile_update
        in: query
        type: boolean
        description: Explicitly allow the update of a dockerfile for an image that has already been analyzed (similar to the 'force' option in the external api call, but scoped only to the dockerfile). Defaults to false.
        required: false
      - name: image_metadata
        in: body
        schema:
          $ref: "#/definitions/ImageAddMetadata"
        description: "object describing image to add"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Bulk delete images from DB"
      description: ""
      operationId: "delete_images_async"
      parameters:
      - name: 'imageDigests'
        in: query
        required: true
        x-nullable: false
        type: array
        items:
          type: string
        collectionFormat: csv
      - name: 'force'
        in: query
        type: boolean
        description: "force delete"
        required: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: array
            items:
              type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
  /images/{imageDigest}:
    get:
      tags:
      - "catalog"
      summary: "Get image records from DB"
      description: ""
      operationId: "get_image"
      parameters:
      - name: 'imageDigest'
        in: path
        type: string
        description: "imageDigest of image to get"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete image record from DB"
      description: ""
      operationId: "delete_image"
      parameters:
      - name: 'imageDigest'
        in: path
        type: string
        description: "imageDigest of image to delete"
        required: true
      - name: 'force'
        in: query
        type: boolean
        description: "force delete"
        required: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    put:
      tags:
      - "catalog"
      summary: "Update image record from DB"
      description: ""
      operationId: "update_image"
      parameters:
      - name: 'imageDigest'
        in: path
        type: string
        description: "imageDigest of image to update"
        required: true
      - name: image
        in: body
        schema:
          type: object
        description: "image record to update"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
  /registry_lookup:
    get:
      tags:
      - "catalog"
      summary: "Get image info from registry"
      description: ""
      operationId: "registry_lookup"
      parameters:
      - name: 'tag'
        in: query
        type: string
        description: "tag of image to lookup"
        required: false
      - name: 'digest'
        in: query
        type: string
        description: "digest of image to lookup"
        required: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

#  /import:
#    post:
#      tags:
#      - "catalog"
#      summary: "Import raw anchore image record into DB"
#      description: ""
#      operationId: "image_import"
#      parameters:
#      - name: 'bodycontent'
#        in: body
#        schema:
#          type: object
#        description: "image record to update"
#        required: true
#      produces:
#      - "application/json"
#      responses:
#        200:
#          description: "success"
#          schema:
#            type: object
#      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /policies:
    get:
      tags:
      - "catalog"
      summary: "Get policy records from DB"
      description: ""
      operationId: "list_policies"
      parameters:
      - name: active
        in: query
        type: boolean
        required: false
        description: "Filter policy bundles by active status"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policies"
    post:
      tags:
      - "catalog"
      summary: "Add policy record to DB"
      description: ""
      operationId: "add_policy"
      parameters:
      - name: bodycontent
        in: body
        schema:
          type: object
        description: "image record to update"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policies"
  /policies/{policyId}:
    get:
      tags:
      - "catalog"
      summary: "Get policy record from DB"
      description: "Get a single policy bundle"
      operationId: "get_policy"
      parameters:
      - name: policyId
        in: path
        type: string
        description: "policy id of object to get"
        required: True
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policies"
    delete:
      tags:
      - "catalog"
      summary: "Delete policy record from DB"
      description: ""
      operationId: "delete_policy"
      parameters:
      - name: policyId
        in: path
        type: string
        description: "policy object to delete"
        required: true
      - name: 'cleanup_evals'
        in: query
        type: boolean
        description: "delete all policy eval records associated with policyId on deletion"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policies"
    put:
      tags:
      - "catalog"
      summary: "Update policy record from DB"
      description: ""
      operationId: "update_policy"
      parameters:
      - name: policyId
        in: path
        type: string
        required: true
      - name: bodycontent
        in: body
        schema:
          type: object
        description: "Policy bundle content"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policies"
  /evals:
    get:
      tags:
      - "catalog"
      summary: "Get eval records from DB"
      description: ""
      operationId: "get_evals"
      parameters:
      - name: policyId
        type: string
        in: query
        required: false
      - name: imageDigest
        type: string
        in: query
        required: false
      - name: tag
        type: string
        in: query
        required: false
      - name: evalId
        type: string
        in: query
        required: false
      - name: newest_only
        type: boolean
        required: false
        in: query
      - name: interactive
        type: boolean
        required: false
        in: query
      - name: history_only
        type: boolean
        required: false
        in: query
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policy_evaluations"
    delete:
      tags:
      - "catalog"
      summary: "Delete eval record from DB"
      description: ""
      operationId: "delete_eval"
      parameters:
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "eval object to delete"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policy_evaluations"
    put:
      tags:
      - "catalog"
      summary: "Update eval record from DB"
      description: ""
      operationId: "update_eval"
      parameters:
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "eval record to update"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policy_evaluations"
    post:
      tags:
      - "catalog"
      summary: "Add eval record to DB"
      description: ""
      operationId: "add_eval"
      parameters:
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "eval record to add"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.policy_evaluations"
  /objects/{bucket}/{archiveid}:
    get:
      tags:
      - "catalog"
      summary: "Get document from object store"
      description: ""
      operationId: "get_object"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.objects"
    post:
      tags:
      - "catalog"
      summary: "Add document to object store"
      description: ""
      operationId: "create_object"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "document to object store"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.objects"
    delete:
      tags:
      - "catalog"
      summary: "Delete a document from archive"
      description: ""
      operationId: "delete_object"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.objects"
  /archive/{bucket}/{archiveid}:
    get:
      tags:
      - "catalog"
      summary: "Get document from archive"
      description: ""
      operationId: "get_archive"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.data_archive"
    post:
      tags:
      - "catalog"
      summary: "Add document to archive"
      description: ""
      operationId: "create_archive"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "document to archive"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.data_archive"
    delete:
      tags:
      - "catalog"
      summary: "Delete a document from archive"
      description: ""
      operationId: "delete_archive"
      parameters:
      - name: 'bucket'
        in: path
        type: string
        description: "bucket"
        required: true
      - name: 'archiveid'
        in: path
        type: string
        description: "archiveid"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.data_archive"
  /subscriptions:
    get:
      tags:
      - "catalog"
      summary: "Get subscription records from DB"
      description: ""
      operationId: "subscriptions_get"
      parameters:
      - name: 'subscription_key'
        in: query
        type: string
        description: "filter only subscriptions matching key"
        required: false
      - name: 'subscription_type'
        in: query
        type: string
        description: "filter only subscriptions matching type"
        required: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    post:
      tags:
      - "catalog"
      summary: "Add subscription record to DB"
      description: ""
      operationId: "subscriptions_post"
      parameters:
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "subscription object to add"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /subscriptions/{subscriptionId}:
    get:
      tags:
      - "catalog"
      summary: "Get subscription records from DB"
      description: ""
      operationId: "subscriptions_subscriptionId_get"
      parameters:
      - name: 'subscriptionId'
        in: path
        type: string
        description: "subscription Id object to get"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete subscription records from DB"
      description: ""
      operationId: "subscriptions_subscriptionId_delete"
      parameters:
      - name: 'subscriptionId'
        in: path
        type: string
        description: "subscription Id object to delete"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    put:
      tags:
      - "catalog"
      summary: "Add subscription record to DB"
      description: ""
      operationId: "subscriptions_subscriptionId_put"
      parameters:
      - name: 'subscriptionId'
        in: path
        type: string
        description: "subscription Id of object to update"
        required: true
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "subscription object to update"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /events:
    get:
      tags:
      - "catalog"
      summary: "Get event records from DB"
      description: ""
      operationId: "events_get"
      parameters:
      - name: source_servicename
        in: query
        type: string
        description: ""
        required: false
      - name: source_hostid
        in: query
        type: string
        description: ""
        required: false
      - name: resource_type
        in: query
        type: string
        description: ""
        required: false
      - name: event_type
        in: query
        type: string
        description: Filter events by a prefix match on the event type (e.g. "user.image.")
        required: false
        pattern: '^[a-z0-9-_.*]+$'
      - name: resource_id
        in: query
        type: string
        description: ""
        required: false
      - name: level
        in: query
        type: string
        description: ""
        required: false
      - name: since
        in: query
        type: string
        description: ""
        required: false
      - name: before
        in: query
        type: string
        description: ""
        required: false
      - name: page
        in: query
        type: integer
        description: ""
        required: false
        default: 1
      - name: limit
        in: query
        type: integer
        description: ""
        required: false
        default: 100
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete events from DB "
      description: ""
      operationId: "events_delete"
      parameters:
      - name: 'since'
        in: query
        type: string
        description: ""
        required: false
      - name: 'before'
        in: query
        type: string
        description: ""
        required: false
      - name: level
        in: query
        type: string
        description: ""
        required: false
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    post:
      tags:
      - "catalog"
      summary: "Add event record to DB"
      description: ""
      operationId: "events_post"
      parameters:
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "event record to be created"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /events/{eventId}:
    get:
      tags:
      - "catalog"
      summary: "Get an event record from DB"
      description: ""
      operationId: "events_eventId_get"
      parameters:
      - name: eventId
        in: path
        type: string
        description: "uuid of the event to describe"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete event record from DB"
      description: ""
      operationId: "events_eventId_delete"
      parameters:
      - name: 'eventId'
        in: path
        type: string
        description: "uuid of the event to delete"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /users:
    get:
      tags:
      - "catalog"
      summary: "Get user records from DB"
      description: ""
      operationId: "users_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /users/{inuserId}:
    get:
      tags:
      - "catalog"
      summary: "Get user records from DB"
      description: ""
      operationId: "users_userId_get"
      parameters:
      - name: 'inuserId'
        in: path
        type: string
        description: "user Id object to get"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete user records from DB"
      description: ""
      operationId: "users_userId_delete"
      parameters:
      - name: 'inuserId'
        in: path
        type: string
        description: "user Id object to delete"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/registries:
    get:
      tags:
      - "catalog"
      summary: "Get registry records from DB"
      description: ""
      operationId: "system_registries_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    post:
      tags:
      - "catalog"
      summary: "Add registry record to DB"
      description: ""
      operationId: "system_registries_post"
      parameters:
      - name: 'validate'
        in: query
        type: boolean
        description: "flag to determine whether or not to validate registry/credential at registry add time"
        required: false
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "registry object to add"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/registries/{registry}:
    get:
      tags:
      - "catalog"
      summary: "Get registry records from DB"
      description: ""
      operationId: "system_registries_registry_get"
      parameters:
      - name: 'registry'
        in: path
        type: string
        description: "registry Id object to get"
        required: true
        format: path
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete registry records from DB"
      description: ""
      operationId: "system_registries_registry_delete"
      parameters:
      - name: 'registry'
        in: path
        type: string
        description: "registry Id object to delete"
        required: true
        format: path
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    put:
      tags:
      - "catalog"
      summary: "Add registry record to DB"
      description: ""
      operationId: "system_registries_registry_put"
      parameters:
      - name: 'registry'
        in: path
        type: string
        description: "registry Id of object to update"
        required: true
        format: path
      - name: 'validate'
        in: query
        type: boolean
        description: "flag to determine whether or not to validate registry/credential at registry update time"
        required: false
      - name: 'bodycontent'
        in: body
        schema:
          type: object
        description: "registry object to update"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system:
    get:
      tags:
      - "catalog"
      summary: "Get system routes"
      description: ""
      operationId: "system_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/services:
    get:
      tags:
      - "catalog"
      summary: "Get system services list"
      description: ""
      operationId: "system_services_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/services/{servicename}:
    get:
      tags:
      - "catalog"
      summary: "Get hostIds for all hosts servicing servicename services"
      description: ""
      operationId: "system_services_servicename_get"
      parameters:
      - name: 'servicename'
        in: path
        type: string
        description: "service name"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/services/{servicename}/{hostId}:
    get:
      tags:
      - "catalog"
      summary: "Get services running on hostId"
      description: ""
      operationId: "system_services_servicename_hostId_get"
      parameters:
      - name: 'servicename'
        in: path
        type: string
        description: "service name"
        required: true
      - name: 'hostId'
        in: path
        type: string
        description: "host ID"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"
    delete:
      tags:
      - "catalog"
      summary: "Delete registry records from DB"
      description: ""
      operationId: "system_services_servicename_hostId_delete"
      parameters:
      - name: 'servicename'
        in: path
        type: string
        description: "service name"
        required: true
      - name: 'hostId'
        in: path
        type: string
        description: "host ID"
        required: true
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  /system/subscriptions:
    get:
      tags:
      - "catalog"
      summary: "Get subscription types"
      description: ""
      operationId: "system_subscriptions_get"
      produces:
      - "application/json"
      responses:
        200:
          description: "success"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.default_controller"

  # Data archives
  /archives:
    get:
      operationId: list_archives
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: listArchives
      responses:
        200:
          description: Archive summary listing
          schema:
            $ref: "#/definitions/ArchiveSummary"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /archives/rules:
    get:
      operationId: list_analysis_archive_rules
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: listArchiveTransitionRules
      parameters:
        - name: system_global
          in: query
          required: false
          type: boolean
          description: If true include system global rules (owned by admin) even for non-admin users. Defaults to true if not set. Can be set to false to exclude globals
      responses:
        200:
          description: Archive transition rules
          schema:
            $ref: "#/definitions/AnalysisArchiveRules"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    post:
      operationId: create_analysis_archive_rule
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: createArchiveTransitionRule
      parameters:
        - name: rule
          in: body
          schema:
            $ref: "#/definitions/AnalysisArchiveTransitionRule"
          required: True
      responses:
        200:
          description: Archive transition rule
          schema:
            $ref: "#/definitions/AnalysisArchiveTransitionRule"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /archives/rules/{rule_id}:
    get:
      operationId: get_analysis_archive_rule
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: getArchiveTransitionRule
      parameters:
        - name: rule_id
          type: string
          required: true
          in: path
      responses:
        200:
          description: Archive transition rule
          schema:
            $ref: "#/definitions/AnalysisArchiveTransitionRule"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    delete:
      operationId: delete_analysis_archive_rule
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: deleteArchiveTransitionRule
      parameters:
        - name: rule_id
          type: string
          required: true
          in: path
      responses:
        200:
          description: Archive transition rule
          schema:
            $ref: "#/definitions/AnalysisArchiveTransitionRule"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /archives/rules/{rule_id}/history:
    get:
      operationId: get_analysis_archive_rule_history
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: getArchiveTransitionRuleHistory
      parameters:
        - name: rule_id
          type: string
          required: true
          in: path
      responses:
        200:
          description: Archive transition rule history of actions
          schema:
            $ref: "#/definitions/AnalysisArchiveTransitionHistory"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /archives/images:
    get:
      operationId: list_analysis_archive
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: listArchivedImageAnalysis
      responses:
        200:
          description: Image analysis archive listing for the requesting account (not the whole system)
          schema:
            $ref: "#/definitions/ArchivedAnalyses"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    post:
      operationId: archive_image_analysis
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: createArchivedImageAnalysis
      parameters:
        - name: imageReferences
          in: body
          required: true
          schema:
            $ref: "#/definitions/ImageAnalysisReferences"
      responses:
        200:
          description: Archive statuses
          schema:
            $ref: "#/definitions/AddAnalysisArchiveResult"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
  /archives/images/{imageDigest}:
    get:
      description: Returns the archive metadata record identifying the image and tags for the analysis in the archive.
      operationId: get_archived_analysis
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: getArchivedImageAnalysis
      parameters:
        - name: imageDigest
          in: path
          required: true
          type: string
          description: The image digest to identify the image analysis
      responses:
        200:
          description: Archived Image
          schema:
            $ref: "#/definitions/ArchivedAnalysis"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
    delete:
      description: Performs a synchronous archive deletion
      operationId: delete_archived_analysis
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      x-anchore-authz-action: deleteArchivedImageAnalysis
      parameters:
        - name: imageDigest
          in: path
          required: true
          type: string
        - name: force
          in: query
          required: false
          type: boolean
      responses:
        200:
          description: ArchivdImageAnalysis record but with status 'deleted'
          schema:
            $ref: "#/definitions/ArchivedAnalysis"
        500:
          description: Internal error
          schema:
            $ref: "#/definitions/ApiErrorResponse"
# TODO: Add content fetch for an archive. Also add ability to load a previouisly fetched archive back into the system.
#  /archives/images/data/{imageDigest}/export:
#    get:
#      tags:
#        - "catalog"
#      summary: "Return the archive content, as a tar.gz file"
#      description: "Retrieves the content of the archive, as a gzipped tar file. This is potentially a multi-mb data transfer"
#      operationId: "get_archived_image_content"
#      parameters:
#        - name: 'imageDigest'
#          in: path
#          type: string
#          description: "imageDigest of image to get"
#          required: true
#      produces:
#        - "application/gzip"
#      responses:
#        200:
#          description: "success"
#      x-swagger-router-controller: "anchore_engine.services.catalog.api.controllers.analysis_archive"
  /archives/images/data/{imageDigest}/import:
    post:
      summary: Import a previously exported archive tarball into the system.
      description: Load an archive into the system. If the imageDigest does not exist in the archive already, it is added. If the digest is already archived, an error is returned unless the 'force' parameter is set. If the digest exists in the catalog but is not archived, an error is returned regardless of 'force' status.
      operationId: import_archive
      x-swagger-router-controller: anchore_engine.services.catalog.api.controllers.archives
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: archive_file
          in: formData
          description: The gzipped-tarball, .tar.gz, to be loaded
          type: file
          required: true
        - name: 'imageDigest'
          in: path
          type: string
          description: "imageDigest of image to import"
          required: true
      responses:
        200:
          description: "Loaded"
          schema:
            # TODO: replace with proper model
            type: object
definitions:
  ImageAddMetadata:
    description: Additional data to add to an image record when an image is ingressed, such as dockerfile and annotations
    type: object
    properties:
      dockerfile:
        type: string
        description: base64 encoded content of the dockerfile used to build the image, if available
      annotations:
        type: object
        description: Key-Value metadata to add to the record
  ApiErrorResponse:
    description: "Generic HTTP API error response"
    type: object
    properties:
      code:
        type: integer
        format: int32
      error_type:
        type: "string"
      message:
        type: "string"
      detail:
        type: object
        description: Details structure for additional information about the error if available. Content and structure will be error specific.
  ArchiveSummary:
    type: object
    description: A summarization of the available archives, a place to for long-term storage of audit, analysis, or other data to remove it from the system's working set but keep it available.
    properties:
      images:
        $ref: "#/definitions/AnalysisArchiveSummary"
      rules:
        $ref: "#/definitions/AnalysisArchiveRulesSummary"
  AnalysisArchiveSummary:
    type: object
    description: A summarization of the analysis archive, including size, counts, etc. This archive stores image analysis only, never the actual image content or layers.
    properties:
      total_image_count:
        type: integer
        description: The number of unique images (digests) in the archive
      total_tag_count:
        type: integer
        description: The number of tag records (registry/repo:tag pull strings) in the archive. This may include repeated tags but will always have a unique tag->digest mapping per record.
      total_data_bytes:
        type: integer
        description: The total sum of all the bytes stored to the backing storage. Accounts for anchore-applied compression, but not compression by the underlying storage system.
      last_updated:
        type: string
        description: The timestamp of the most recent archived image
        format: date-time
  AnalysisArchiveRulesSummary:
    type: object
    description: Summary of the transition rule set
    properties:
      count:
        type: integer
        description: The number of rules for this account
      last_updated:
        type: string
        description: The newest last_updated timestamp from the set of rules
        format: date-time
  ImageAnalysisReferences:
    type: array
    description: List of image digests to archive
    items:
      type: string
      description: Image digest
  AddAnalysisArchiveResult:
    type: array
    description: List of analysis archive add results
    items:
      $ref: "#/definitions/AnalysisArchiveAddResult"
  AnalysisArchiveAddResult:
    type: object
    description: The result of adding a single digest to the archive
    properties:
      digest:
        type: string
        description: The image digest requested to be added
      status:
        type: string
        description: The status of the archive add operation. Typically either 'archived' or 'error'
        enum:
          - archived
          - archiving
          - error
      detail:
        type: string
        description: Details on the status, e.g. the error message
  ArchivedAnalyses:
    type: array
    description: List of archived analyses
    items:
      $ref: "#/definitions/ArchivedAnalysis"
  ArchivedAnalysis:
    type: object
    properties:
      imageDigest:
        type: string
        description: The image digest (digest of the manifest describing the image, per docker spec)
      parentDigest:
        type: string
        description: The digest of a parent manifest (for manifest-list images)
      annotations:
        type: object
        description: User provided annotations as key-value pairs
      status:
        description: The archival status
        type: string
        enum:
        - archiving
        - archived
        - deleting
        - deleted
      image_detail:
        description: List of tags associated with the image digest
        type: array
        items:
          $ref: "#/definitions/TagEntry"
      created_at:
        type: string
        format: date-time
      last_updated:
        type: string
        format: date-time
      analyzed_at:
        type: string
        format: date-time
      archive_size_bytes:
        type: integer
        description: The size, in bytes, of the analysis archive file
  AnalysisArchiveRules:
    type: array
    description: Rule set for automatic archiving of system objects and flushing of archived objects (permament delete).
    items:
      $ref: "#/definitions/AnalysisArchiveTransitionRule"
  AnalysisArchiveTransitionRule:
    type: object
    description: A rule for auto-archiving image analysis by time and/or tag-history
    required:
      - transition
    properties:
      id:
        type: string
        description: UUID for this rule
      selector:
        $ref: "#/definitions/ImageSelector"
      tag_versions_newer:
        type: integer
        description: Number of images mapped to the tag that are newer
      analysis_age_days:
        type: integer
        description: Matches if the analysis is strictly older than this number of days
      transition:
        type: string
        description: The type of transition to make. If "archive", then archive an image from the working set and remove it from the working set. If "delete", then match against archived images and delete from the archive if match.
        enum:
          - archive
          - delete
      system_global:
        type: boolean
        description: True if the rule applies to all accounts in the system. This is only available to admin users
      created_at:
        type: string
        format: date-time
        description: Rule creation timestamp
      last_updated:
        type: string
        format: date-time
        description: Rule last update timestamp
  AnalysisArchiveTransitionHistory:
    type: object
    description: A rule for auto-archiving image analysis by time and/or tag-history
    properties:
      transition_task_id:
        type: string
        description: The task that created & updated this entry
      rule_id:
        type: string
      imageDigest:
        type: string
      transition:
        type: string
        enum:
          - archive
          - delete
      created_at:
        type: string
        format: date-time
      last_updated:
        type: string
        format: date-time
  TagEntry:
    type: object
    properties:
      pullstring:
        type: string
        description: The pullable string for the tag. E.g. "docker.io/library/node:latest"
      registry:
        type: string
        description: The registry hostname:port section of the pull string
      repository:
        type: string
        description: The repository section of the pull string
      tag:
        type: string
        description: The tag-only section of the pull string
      detected_at:
        type: string
        format: date-time
        description: The timestamp at which the Anchore Engine detected this tag was mapped to the image digest. Does not necessarily indicate when the tag was actually pushed to the registry.
    description: A docker-pullable tag value as well as deconstructed components
  ImageSelector:
    description: A set of selection criteria to match an image by a tagged pullstring based on its components, with regex support in each field
    type: object
    properties:
      registry:
        type: string
        description: The registry section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest", this is "docker.io"
      repository:
        type: string
        description: The repository section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest", this is "anchore/anchore-engine"
      tag:
        type: string
        description: The tag-only section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest", this is "latest"
  ImageReference:
    type: object
    properties:
      digest:
        type: string
        description: The image digest
      id:
        type: string
        description: The image id if available
      analyzed_at:
        type: string
        description: Timestamp, in rfc3339 format, indicating when the image state became 'analyzed' in Anchore Engine.
      tag_history:
        type: array
        items:
          $ref: '#/definitions/TagEntry'
    description: A summary of an image identity, including digest, id (if available), and any tags known to have ever been mapped to the digest
  ServiceVersion:
    type: object
    description: Version information for a service
    properties:
      service:
        type: object
        properties:
          version:
            type: string
            description: Semantic Version string of the service implementation
      api:
        type: object
        description: Api Version string
        properties:
          version:
            type: string
            description: Semantic version of the api
      db:
        type: object
        properties:
          schema_version:
            type: string
            description: Semantic version of the db schema
