# coding: utf-8


from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from anchore_engine.services.policy_engine.api.models.base_model_ import Model
from anchore_engine.services.policy_engine.api import util


class FeedSyncResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, start_time=None, end_time=None, status=None):  # noqa: E501
        """FeedSyncResult - a model defined in Swagger

        :param start_time: The start_time of this FeedSyncResult.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this FeedSyncResult.  # noqa: E501
        :type end_time: datetime
        :param status: The status of this FeedSyncResult.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            "start_time": datetime,
            "end_time": datetime,
            "status": str,
        }

        self.attribute_map = {
            "start_time": "start_time",
            "end_time": "end_time",
            "status": "status",
        }

        self._start_time = start_time
        self._end_time = end_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedSyncResult of this FeedSyncResult.  # noqa: E501
        :rtype: FeedSyncResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_time(self):
        """Gets the start_time of this FeedSyncResult.


        :return: The start_time of this FeedSyncResult.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this FeedSyncResult.


        :param start_time: The start_time of this FeedSyncResult.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this FeedSyncResult.


        :return: The end_time of this FeedSyncResult.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this FeedSyncResult.


        :param end_time: The end_time of this FeedSyncResult.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this FeedSyncResult.


        :return: The status of this FeedSyncResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeedSyncResult.


        :param status: The status of this FeedSyncResult.
        :type status: str
        """
        allowed_values = ["complete", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}".format(
                    status, allowed_values
                )
            )

        self._status = status
