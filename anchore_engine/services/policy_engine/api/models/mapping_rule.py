# coding: utf-8


from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from anchore_engine.services.policy_engine.api.models.base_model_ import Model
from anchore_engine.services.policy_engine.api.models.image_ref import (
    ImageRef,
)  # noqa: F401,E501
from anchore_engine.services.policy_engine.api import util


class MappingRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id=None,
        name=None,
        whitelist_ids=None,
        policy_id=None,
        registry=None,
        repository=None,
        image=None,
    ):  # noqa: E501
        """MappingRule - a model defined in Swagger

        :param id: The id of this MappingRule.  # noqa: E501
        :type id: str
        :param name: The name of this MappingRule.  # noqa: E501
        :type name: str
        :param whitelist_ids: The whitelist_ids of this MappingRule.  # noqa: E501
        :type whitelist_ids: List[str]
        :param policy_id: The policy_id of this MappingRule.  # noqa: E501
        :type policy_id: str
        :param registry: The registry of this MappingRule.  # noqa: E501
        :type registry: str
        :param repository: The repository of this MappingRule.  # noqa: E501
        :type repository: str
        :param image: The image of this MappingRule.  # noqa: E501
        :type image: ImageRef
        """
        self.swagger_types = {
            "id": str,
            "name": str,
            "whitelist_ids": List[str],
            "policy_id": str,
            "registry": str,
            "repository": str,
            "image": ImageRef,
        }

        self.attribute_map = {
            "id": "id",
            "name": "name",
            "whitelist_ids": "whitelist_ids",
            "policy_id": "policy_id",
            "registry": "registry",
            "repository": "repository",
            "image": "image",
        }

        self._id = id
        self._name = name
        self._whitelist_ids = whitelist_ids
        self._policy_id = policy_id
        self._registry = registry
        self._repository = repository
        self._image = image

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MappingRule of this MappingRule.  # noqa: E501
        :rtype: MappingRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MappingRule.


        :return: The id of this MappingRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MappingRule.


        :param id: The id of this MappingRule.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this MappingRule.


        :return: The name of this MappingRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MappingRule.


        :param name: The name of this MappingRule.
        :type name: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def whitelist_ids(self):
        """Gets the whitelist_ids of this MappingRule.


        :return: The whitelist_ids of this MappingRule.
        :rtype: List[str]
        """
        return self._whitelist_ids

    @whitelist_ids.setter
    def whitelist_ids(self, whitelist_ids):
        """Sets the whitelist_ids of this MappingRule.


        :param whitelist_ids: The whitelist_ids of this MappingRule.
        :type whitelist_ids: List[str]
        """
        if whitelist_ids is None:
            raise ValueError(
                "Invalid value for `whitelist_ids`, must not be `None`"
            )  # noqa: E501

        self._whitelist_ids = whitelist_ids

    @property
    def policy_id(self):
        """Gets the policy_id of this MappingRule.


        :return: The policy_id of this MappingRule.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this MappingRule.


        :param policy_id: The policy_id of this MappingRule.
        :type policy_id: str
        """
        if policy_id is None:
            raise ValueError(
                "Invalid value for `policy_id`, must not be `None`"
            )  # noqa: E501

        self._policy_id = policy_id

    @property
    def registry(self):
        """Gets the registry of this MappingRule.


        :return: The registry of this MappingRule.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this MappingRule.


        :param registry: The registry of this MappingRule.
        :type registry: str
        """
        if registry is None:
            raise ValueError(
                "Invalid value for `registry`, must not be `None`"
            )  # noqa: E501

        self._registry = registry

    @property
    def repository(self):
        """Gets the repository of this MappingRule.


        :return: The repository of this MappingRule.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this MappingRule.


        :param repository: The repository of this MappingRule.
        :type repository: str
        """
        if repository is None:
            raise ValueError(
                "Invalid value for `repository`, must not be `None`"
            )  # noqa: E501

        self._repository = repository

    @property
    def image(self):
        """Gets the image of this MappingRule.


        :return: The image of this MappingRule.
        :rtype: ImageRef
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this MappingRule.


        :param image: The image of this MappingRule.
        :type image: ImageRef
        """
        if image is None:
            raise ValueError(
                "Invalid value for `image`, must not be `None`"
            )  # noqa: E501

        self._image = image
