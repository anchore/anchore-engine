---
swagger: "2.0"
info:
  description: "Simple queue service for anchore-engine"
  version: "0.9.0"
  title: "Simple Queue"
  contact:
    email: "dev@anchore.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "localhost:83"
basePath: "/"
tags:
- name: "simplequeue"
  description: "Simple Queue Service"
  externalDocs:
    description: "Find out more"
    url: "http://anchore.com"
schemes:
- "https"
- "http"

securityDefinitions:
  basicAuth:
    type: basic

security:
  - basicAuth: []

paths:
  /status:
    get:
      tags:
      - "simplequeue"
      summary: "Get the status of the service"
      description: ""
      operationId: "status"
      produces:
      - "application/json"
      responses:
        200:
          description: "service status"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /queues:
    get:
      tags:
      - "simplequeue"
      summary: "Get list of queues"
      description: ""
      operationId: "queues"
      produces:
      - "application/json"
      responses:
        200:
          description: "Queue listing"
          schema:
            type: array
            items:
              type: string
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /queues/{queuename}:
    get:
      tags:
      - "simplequeue"
      summary: "Pop element off of specified queue"
      description: ""
      operationId: "dequeue"
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: "path"
        type: string
        description: "name of queue to pop element from"
        required: true
      - name: "wait_max_seconds"
        in: query
        type: integer
        description: "Max number of seconds to wait for a task if none available yet"
        required: false
      - name: "visibility_timeout"
        in: query
        type: integer
        required: false
        description: "Number of seconds that a message will stay invisible on receipt before returning to queue if not explicitly deleted with receipt handle"
      responses:
        200:
          description: "Queue element"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
    delete:
      tags:
      - simplequeue
      summary: Delete an element from the queue using receipt handle if supported for that queue
      description: Delete message by receipt_handle
      operationId: delete_message
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: "path"
        type: string
        description: "Name of queue from which to pop element"
        required: true
      - name: "receipt_handle"
        in: "query"
        type: string
        required: true
        description: "The receipt handle for the message received when the message was popped from the queue"
      responses:
        200:
          description: "Deleted successfully"
          schema:
            type: string
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
    put:
      tags:
      - simplequeue
      summary: Update the visibility timeout
      description: "Reset visibility timeout for a message identified by receipt handle using the new value. The value is applied to the time the server receives the message."
      operationId: update_message_visibility_timeout
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: "path"
        type: string
        description: "Name of queue from which to pop element"
        required: true
      - name: "receipt_handle"
        in: "query"
        type: string
        required: true
        description: "The receipt handle for the message received when the message was popped from the queue"
      - name: "visibility_timeout"
        in: "query"
        type: integer
        required: true
        description: "The new visibility timeout duration in seconds to be set on the message"
      responses:
        200:
          description: "New message timeout value"
          schema:
            type: string
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
    post:
      tags:
      - "simplequeue"
      summary: "Push element on to specified queue"
      description: ""
      operationId: "enqueue"
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: "path"
        type: string
        description: "name of queue to pop element from"
        required: true
      - name: "forcefirst"
        in: "query"
        type: boolean
        description: "force element to the front of the queue"
        default: false
        required: false
      - name: "qcount"
        in: "query"
        type: integer
        description: "number of times element has been in queue"
        default: 0
        required: false
      - name: "bodycontent"
        in: "body"
        schema:
          type: object
        description: "object to enqueue"
        required: true
      responses:
        200:
          description: "Queue element"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /queues/{queuename}/is_inqueue:
    post:
      tags:
      - "simplequeue"
      summary: "Check if element is already in specified queue"
      description: ""
      operationId: "is_inqueue"
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: path
        type: string
        description: "name of queue to pop element from"
        required: true
      - name: "bodycontent"
        in: body
        schema:
          type: object
        description: "object to check if in queue"
        required: true
      responses:
        200:
          description: "Queue element"
          schema:
            type: object
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /queues/{queuename}/qlen:
    get:
      tags:
      - "simplequeue"
      summary: "Get the length of specified queue"
      description: ""
      operationId: "qlen"
      produces:
      - "application/json"
      parameters:
      - name: "queuename"
        in: "path"
        type: string
        description: "name of queue get the length of"
        required: true
      responses:
        200:
          description: "Length of queue"
          schema:
            type: string
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /leases:
    get:
      tags:
      - "simplequeue"
      - "leases"
      summary: "Get a list of extant leases"
      description: "List leases and return as array of json objects"
      operationId: "list_leases"
      produces:
      - "application/json"
      responses:
        200:
          description: "List of lease objects"
          schema:
            type: array
            items:
              $ref: "#/definitions/LeaseRecord"
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
    post:
      tags:
      - "simplequeue"
      - "leases"
      summary: "Create a new lease"
      description: "Create a new lease to reserve the id. Does not acquire the lease, just initializes. Idempotent so if already exists returns 200."
      operationId: "create_lease"
      produces:
      - "application/json"
      parameters:
      - name: lease_id
        in: query
        type: string
        required: true
        description: The identifier for the lease
      responses:
        200:
          description: "Created, but not acquired, lease."
          schema:
            type: array
            items:
              $ref: "#/definitions/LeaseRecord"
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /leases/{lease_id}:
    get:
      tags:
      - "simplequeue"
      - "leases"
      summary: Get current status on the lock
      operationId: "describe_lease"
      parameters:
      - name: lease_id
        type: string
        description: The id of the lease
        required: true
        in: path
      produces:
      - "application/json"
      responses:
        200:
          description: Description of a singel lease object
          schema:
            type: object
        404:
          description: Invalid lease id
          schema:
            type: string
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /leases/{lease_id}/acquire:
    get:
      parameters:
      - name: lease_id
        in: path
        required: true
        type: string
        description: The lease id to acquire
      - name: client_id
        type: string
        description: The identifier of the caller
        in: query
        required: true
      - name: ttl
        in: query
        type: integer
        required: true
        description: The ttl for the lease in seconds
      summary: Acquire the lease if available, else return empty
      operationId: acquire_lease
      responses:
        200:
          description: Acquired lease object where held_by property is set to the client_id and ttl is set
          schema:
            $ref: "#/definitions/LeaseRecord"
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
  /leases/{lease_id}/ttl:
    put:
      operationId: refresh_lease
      parameters:
      - name: lease_id
        in: path
        required: true
        type: string
      - name: client_id
        in: query
        type: string
        required: true
      - name: ttl
        in: query
        required: true
        type: integer
      - name: epoch
        in: query
        required: true
        type: integer
      description: Update the ttl for the lease if client_id is the holder
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
      produces:
      - "application/json"
      responses:
        200:
          description: Updated lease object with new ttl
          schema:
            $ref: "#/definitions/LeaseRecord"
  /leases/{lease_id}/release:
    get:
      tags:
      - "simplequeue"
      - "leases"
      parameters:
      - name: lease_id
        type: string
        in: path
        required: true
      - name: client_id
        type: string
        in: query
        required: true
      - name: epoch
        type: integer
        in: query
        required: true
      description: Release the lease for the id with my_id as holder and the epoch value from the lease acquisition response
      operationId: release_lease
      x-swagger-router-controller: "anchore_engine.services.simplequeue.api.controllers.default_controller"
      produces:
      - "application/json"
      responses:
        200:
          description: "Lease released successfully"
          schema:
            type: string
        400:
          description: "Lease not held by caller, cannot release"
definitions:
  LeaseRecord:
    type: object
    description: A lease that has a ttl, owner, and id
    required:
    - id
    - held_by
    - expires_at
    - epoch
    properties:
      id:
        type: string
        description: The lease id (or name)
      held_by:
        type: string
        description: The client_id of the current holder of the lease
      expires_at:
        type: string
        format: date-time
        description: The date time at which the held_by will be reset to null unless explicitly released or refreshed before that time. This is the ttl.
      epoch:
        type: integer
        description: An operation counter on the lease to fence updates and ensure the server always moves forward. This integer is monotonic.
